{"version":3,"file":"static/js/144.5142f8bf.chunk.js","mappings":"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","sources":["webpack://react-complete-guide/./src/components/quotes/QuoteItem.module.css?127c","components/quotes/QuoteItem.js","webpack://react-complete-guide/./src/components/quotes/QuoteList.module.css?9d5d","components/quotes/QuoteList.js","webpack://react-complete-guide/./src/components/quotes/NoQuotesFound.module.css?2c4b","components/quotes/NoQuotesFound.js","pages/AllQuotes.js","hooks/use-http.js","lib/api.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"item\":\"QuoteItem_item__JchvT\"};","import { Link } from \"react-router-dom\";\nimport classes from \"./QuoteItem.module.css\";\nimport { FcLike } from \"react-icons/fc\";\nimport { FaUserCircle } from \"react-icons/fa\";\nimport { useState } from \"react\";\n\nconst QuoteItem = (props) => {\n  const [liked, setLiked] = useState(false);\n  const onToggleLiked = () => {\n    setLiked((prevLiked) => !prevLiked);\n  };\n\n  return (\n    <Link to={`/quotes/${props.id}`} className=\"bottonLink\">\n      <li className={classes.item}>\n        \n        <figure>\n          <blockquote>\n            <p>{props.text}</p>\n          </blockquote>\n          <FaUserCircle />\n          <figcaption>{props.author}</figcaption>\n        </figure>\n    \n        <div>\n          <button className=\"btn\" onClick={onToggleLiked}>\n            <FcLike />\n            {liked ? \"Like\" : \"\"}\n          </button>\n        </div>\n      </li>\n    </Link>\n  );\n};\n\nexport default QuoteItem;\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"QuoteList_list__-ve0U\",\"sorting\":\"QuoteList_sorting__41rpr\",\"icons\":\"QuoteList_icons__VTfa0\"};","import { Fragment, useState} from \"react\";\nimport { useHistory, useLocation } from \"react-router-dom\";\n\nimport QuoteItem from \"./QuoteItem\";\nimport classes from \"./QuoteList.module.css\";\nimport { BsAlignCenter } from \"react-icons/bs\";\nimport { BiGhost } from \"react-icons/bi\";\nimport { SiEquinixmetal } from \"react-icons/si\";\nimport { GiArmoredBoomerang } from \"react-icons/gi\";\nimport { RiAliensFill } from \"react-icons/ri\";\nimport { AiFillRobot } from \"react-icons/ai\";\n\nconst QuoteList = (props) => {\n  const sortQuotes = (quotes, ascending) => {\n    return quotes.sort((quoteA, quoteB) => {\n      if (ascending) {\n        return quoteA.id > quoteB.id ? 1 : -1;\n      } else {\n        return quoteA.id < quoteB.id ? 1 : -1;\n      }\n    });\n  };\n\n\n  const history = useHistory();\n  const location = useLocation();\n\n  const queryParams = new URLSearchParams(location.search);\n  const isSortingAscending = queryParams.get(\"sort\") === \"asc\";\n\n  const sortedQuotes = sortQuotes(props.quotes, isSortingAscending);\n\n  const changeSortingHandler = () => {\n    history.push({\n      pathname: location.pathname,\n      search: `?sort=${isSortingAscending ? \"desc\" : \"asc\"}`,\n    });\n    // history.push(`${location.pathname}?sort=${(isSortingAscending ? 'desc':'asc')}`)            //alternative\n  };\n\n  return (\n    <Fragment>\n      <div className={classes.sorting}>\n        <button onClick={changeSortingHandler}>\n          <span>Sort {isSortingAscending ? \"Descending\" : \"Ascending\"}</span>\n          {isSortingAscending ? (\n            <BsAlignCenter className={classes.icons} />\n          ) : (\n            <BsAlignCenter className={classes.icons} />\n          )}\n        </button>\n\n        <button>\n          <span>Personality</span>\n          <BiGhost className={classes.icons} />\n        </button>\n        <button>\n          <span>Growth</span>\n          <GiArmoredBoomerang className={classes.icons} />\n        </button>\n        <button>\n          <span>Elon Musk</span>\n          <RiAliensFill className={classes.icons} />\n        </button>\n        <button>\n          <span>Artificial Intelligence</span>\n          <AiFillRobot className={classes.icons} />\n        </button>\n        <button>\n          <span>MetaVerse</span>\n          <SiEquinixmetal className={classes.icons} />\n        </button>\n      </div>\n      <hr />\n\n      <ul className={classes.list}>\n        {sortedQuotes.map((quote) => (\n          <QuoteItem\n            key={quote.id}\n            id={quote.id}\n            author={quote.author}\n            text={quote.text}\n          />\n        ))}\n      </ul>\n    </Fragment>\n  );\n};\n\nexport default QuoteList;\n","// extracted by mini-css-extract-plugin\nexport default {\"noquotes\":\"NoQuotesFound_noquotes__q85Wh\"};","import classes from './NoQuotesFound.module.css';\nimport { Link } from 'react-router-dom';\n\nconst NoQuotesFound = () => {\n  return (\n    <div className={classes.noquotes}>\n      <p>No quotes found!</p>\n      <Link className='btn' to='/new-quote'>\n           Add a Quote\n      </Link>\n    </div>\n  );\n};\n\nexport default NoQuotesFound;\n","import QuoteList from \"../components/quotes/QuoteList\";\nimport useHttp from \"../hooks/use-http\";\nimport { getAllQuotes } from \"../lib/api\";\nimport { useEffect } from \"react\";\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\nimport NoQuotesFound from \"../components/quotes/NoQuotesFound\";\n\nconst AllQuotes = () => {\n  const {\n    sendRequest,\n    status,\n    data: loadedQuote,\n    error,\n  } = useHttp(getAllQuotes, true);\n\n  useEffect(() => {\n    sendRequest();\n  }, [sendRequest]);\n\n  if (status === \"pending\") {\n    return (\n      <div className=\"centered\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if (error) {\n    return <p className=\"centered focused\">{error}</p>;\n  }\n\n  if (status === \"completed\" && (!loadedQuote || loadedQuote.length === 0)) {\n    return <NoQuotesFound />;\n  }\n\n  return <QuoteList quotes={loadedQuote} />;\n};\n\nexport default AllQuotes;\n","import { useReducer, useCallback } from 'react';\n\nconst httpReducer= (state, action)=>{\n  if (action.type === 'SEND') {  return {  data: null,  error: null,  status: 'pending',  };  }\n  if (action.type === 'SUCCESS') {  return {  data: action.responseData,  error: null,  status: 'completed',  };  }\n  if (action.type === 'ERROR') { return { data: null, error: action.errorMessage, status: 'completed', }; }\n  return state;\n}\n\nconst useHttp = (requestFunction, startWithPending = false)=>{\n  const [httpState, dispatch] = useReducer( httpReducer, { status: startWithPending ? 'pending' : null, data: null, error: null });\n\n  const sendRequest = useCallback(\n    async function (requestData) {\n      dispatch({ type: 'SEND' });\n\n      try {\n        const responseData = await requestFunction(requestData);\n        dispatch({ type: 'SUCCESS', responseData });\n      } catch (error) {\n        dispatch({ type: 'ERROR', errorMessage: error.message || 'Something went wrong!', });\n      }\n    },\n    [requestFunction]\n  );\n  return { sendRequest, ...httpState };\n}\n\nexport default useHttp;\n","const FIREBASE_DOMAIN = 'https://s22-auth-default-rtdb.firebaseio.com//quoteApp';\n\n// export const getAllQuotes = async()=> {\nexport async function getAllQuotes() {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`);\n  const data = await response.json();\n  if (!response.ok) {throw new Error(data.message || 'Could not fetch quotes.');}\n\n  const transformedQuotes = [];\n  for (const key in data) {  const quoteObj = {  id: key,  ...data[key],  };\n  transformedQuotes.push(quoteObj);\n  }\n return transformedQuotes;\n}\n\n// export const getSingleQuote = async(quoteId)=> {\nexport async function getSingleQuote(quoteId) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes/${quoteId}.json`);\n  const data = await response.json();\n\n  if (!response.ok) { throw new Error(data.message || 'Could not fetch quote.'); }\n\n  const loadedQuote = { id: quoteId, ...data, };\n  return loadedQuote;\n}\n\nexport const addQuote = async(quoteData) => {\n  // export async function addQuote(quoteData) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`, { method: 'POST', body: JSON.stringify(quoteData), headers: { 'Content-Type': 'application/json', }, });\n  const data = await response.json();\n\n  if (!response.ok) {throw new Error(data.message || 'Could not create quote.');}\n  return null;\n}\n\n// export const addComment = async(requestData)=> {\nexport async function addComment(requestData) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/comments/${ requestData.quoteId}.json`, {method: 'POST',body: JSON.stringify(requestData.commentData),headers: {'Content-Type': 'application/json',},});\n  const data = await response.json();\n\n  if (!response.ok) { throw new Error(data.message || 'Could not add comment.'); }\n  return { commentId: data.name };\n}\n\nexport const getAllComments = async(quoteId)=> {\n// export async function getAllComments(quoteId) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/comments/${quoteId}.json`);\n  const data = await response.json();\n\n  if (!response.ok) { throw new Error(data.message || 'Could not get comments.'); }\n  const transformedComments = [];\n\n  for (const key in data) {\n    const commentObj = { id: key, ...data[key], }; \n    transformedComments.push(commentObj);\n  }\n  return transformedComments;\n}\n\n\n\n//you have to think that what actions we are going to do with the database , and  surprise, you know how much actions it came out , its just 5\n// 1. tofetch/get -  Single Quote (one ID),  All Comments(all IDs),  All Quotes(all IDs)\n// 2. toSend  -  Single Quote (one ID),  Single Comment(one ID)\n "],"names":["props","liked","setLiked","useState","to","id","className","classes","text","author","onClick","prevLiked","history","useHistory","location","useLocation","isSortingAscending","URLSearchParams","search","get","sortedQuotes","quotes","ascending","sort","quoteA","quoteB","Fragment","push","pathname","map","quote","sendRequest","status","data","loadedQuote","error","useHttp","getAllQuotes","useEffect","LoadingSpinner","length","httpReducer","state","action","type","responseData","errorMessage","requestFunction","startWithPending","httpState","dispatch","useReducer","useCallback","async","requestData","message","FIREBASE_DOMAIN","response","fetch","json","ok","Error","transformedQuotes","key","quoteObj","getSingleQuote","quoteId","addQuote","method","body","JSON","stringify","quoteData","headers","addComment","commentData","commentId","name","getAllComments","transformedComments","commentObj"],"sourceRoot":""}