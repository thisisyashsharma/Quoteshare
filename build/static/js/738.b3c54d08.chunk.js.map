{"version":3,"file":"static/js/738.b3c54d08.chunk.js","mappings":"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","sources":["hooks/use-http.js","webpack://react-complete-guide/./src/components/UI/Card.module.css?26d0","components/UI/Card.js","webpack://react-complete-guide/./src/components/quotes/QuoteForm.module.css?b10c","components/quotes/QuoteForm.js","pages/NewQuote.js","lib/api.js"],"sourcesContent":["import { useReducer, useCallback } from 'react';\n\nconst httpReducer= (state, action)=>{\n  if (action.type === 'SEND') {  return {  data: null,  error: null,  status: 'pending',  };  }\n  if (action.type === 'SUCCESS') {  return {  data: action.responseData,  error: null,  status: 'completed',  };  }\n  if (action.type === 'ERROR') { return { data: null, error: action.errorMessage, status: 'completed', }; }\n  return state;\n}\n\nconst useHttp = (requestFunction, startWithPending = false)=>{\n  const [httpState, dispatch] = useReducer( httpReducer, { status: startWithPending ? 'pending' : null, data: null, error: null });\n\n  const sendRequest = useCallback(\n    async function (requestData) {\n      dispatch({ type: 'SEND' });\n\n      try {\n        const responseData = await requestFunction(requestData);\n        dispatch({ type: 'SUCCESS', responseData });\n      } catch (error) {\n        dispatch({ type: 'ERROR', errorMessage: error.message || 'Something went wrong!', });\n      }\n    },\n    [requestFunction]\n  );\n  return { sendRequest, ...httpState };\n}\n\nexport default useHttp;\n","// extracted by mini-css-extract-plugin\nexport default {\"card\":\"Card_card__CQR7Y\"};","import classes from './Card.module.css';\n\nconst Card = (props) => {\n  return <div className={classes.card}>{props.children}</div>;\n};\n\nexport default Card;\n","// extracted by mini-css-extract-plugin\nexport default {\"headingH2\":\"QuoteForm_headingH2__PJS43\",\"form\":\"QuoteForm_form__oANko\",\"loading\":\"QuoteForm_loading__LEggz\",\"control\":\"QuoteForm_control__khq+t\",\"actions\":\"QuoteForm_actions__HvlWM\"};","import { useRef, useState, Fragment } from \"react\";\nimport { Prompt } from \"react-router-dom\";\n\nimport Card from \"../UI/Card\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport classes from \"./QuoteForm.module.css\";\nimport { HiPencilAlt } from \"react-icons/hi\";\nimport { FaUserEdit } from \"react-icons/fa\";\nimport { BsTextParagraph } from \"react-icons/bs\";\n\nconst QuoteForm = (props) => {\n  const [isEntering, setIsEntering] = useState(false);\n  const authorInputRef = useRef();\n  const textInputRef = useRef();\n\n  function submitFormHandler(event) {\n    event.preventDefault();\n\n    const enteredAuthor = authorInputRef.current.value;\n    const enteredText = textInputRef.current.value;\n\n    const isValidAuthor = /\\w/.test(enteredAuthor);\n    const isValidText = /\\w/.test(enteredText);\n\n    if (!isValidAuthor || !isValidText) {\n      alert(\"Please enter an author and your thoughts!\");\n    }\n    // optional: Could validate here\n\n    props.onAddQuote({ author: enteredAuthor, text: enteredText });\n    authorInputRef.current.value = \"\";\n    textInputRef.current.value = \"\";\n\n    alert(\"Astra submitted\");\n  }\n\n  const finishEnteringHandler = () => {\n    setIsEntering(false);\n  };\n  const formFocusHandler = () => {\n    setIsEntering(true);\n  };\n\n  return (\n    <Fragment>\n      <Prompt\n        when={isEntering}\n        message={(location) =>\n          \"Are you sured you want to leave? All entered data will be lost\"\n        }\n      />\n\n      <h2 className={classes.headingH2}>New Quote</h2>\n      <Card>\n        <form\n          onFocus={formFocusHandler}\n          className={classes.form}\n          onSubmit={submitFormHandler}\n          autoComplete=\"off\"\n        >\n          {props.isLoading && (\n            <div className={classes.loading}>\n              {\" \"}\n              <LoadingSpinner />{\" \"}\n            </div>\n          )}\n\n          <div className={classes.control}>\n            <label htmlFor=\"author\">\n              Author <FaUserEdit />{\" \"}\n            </label>\n            <input type=\"text\" id=\"author\" required ref={authorInputRef} />\n          </div>\n\n          <div className={classes.control}>\n            <label htmlFor=\"text\">\n              Astra/Quote <BsTextParagraph />{\" \"}\n            </label>\n            <textarea id=\"text\" rows=\"5\" required ref={textInputRef}></textarea>\n          </div>\n          <div className={classes.actions}>\n            <button onClick={finishEnteringHandler} className=\"btn\">\n              Add Quote <HiPencilAlt />\n            </button>\n          </div>\n        </form>\n      </Card>\n    </Fragment>\n  );\n};\n\nexport default QuoteForm;\n","import { useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport QuoteForm from \"../components/quotes/QuoteForm\";\nimport useHttp from \"../hooks/use-http\";\nimport { addQuote } from \"../lib/api\";\n\nconst NewQuote = () => {\n  const { sendRequest, status } = useHttp(addQuote);\n  const history = useHistory();\n\n  useEffect(() => {\n    if (status === \"completed\") {\n      history.push(\"/quotes\");\n    }\n  });\n\n  const addQuoteHandler = (quoteData) => {\n    sendRequest(quoteData);\n  };\n\n  return (\n    <>\n      <QuoteForm\n        isLoading={status === \"completed\"}\n        onAddQuote={addQuoteHandler}\n      />\n    </>\n  );\n};\n\nexport default NewQuote;\n","const FIREBASE_DOMAIN = 'https://s22-auth-default-rtdb.firebaseio.com//quoteApp';\n\n// export const getAllQuotes = async()=> {\nexport async function getAllQuotes() {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`);\n  const data = await response.json();\n  if (!response.ok) {throw new Error(data.message || 'Could not fetch quotes.');}\n\n  const transformedQuotes = [];\n  for (const key in data) {  const quoteObj = {  id: key,  ...data[key],  };\n  transformedQuotes.push(quoteObj);\n  }\n return transformedQuotes;\n}\n\n// export const getSingleQuote = async(quoteId)=> {\nexport async function getSingleQuote(quoteId) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes/${quoteId}.json`);\n  const data = await response.json();\n\n  if (!response.ok) { throw new Error(data.message || 'Could not fetch quote.'); }\n\n  const loadedQuote = { id: quoteId, ...data, };\n  return loadedQuote;\n}\n\nexport const addQuote = async(quoteData) => {\n  // export async function addQuote(quoteData) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`, { method: 'POST', body: JSON.stringify(quoteData), headers: { 'Content-Type': 'application/json', }, });\n  const data = await response.json();\n\n  if (!response.ok) {throw new Error(data.message || 'Could not create quote.');}\n  return null;\n}\n\n// export const addComment = async(requestData)=> {\nexport async function addComment(requestData) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/comments/${ requestData.quoteId}.json`, {method: 'POST',body: JSON.stringify(requestData.commentData),headers: {'Content-Type': 'application/json',},});\n  const data = await response.json();\n\n  if (!response.ok) { throw new Error(data.message || 'Could not add comment.'); }\n  return { commentId: data.name };\n}\n\nexport const getAllComments = async(quoteId)=> {\n// export async function getAllComments(quoteId) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/comments/${quoteId}.json`);\n  const data = await response.json();\n\n  if (!response.ok) { throw new Error(data.message || 'Could not get comments.'); }\n  const transformedComments = [];\n\n  for (const key in data) {\n    const commentObj = { id: key, ...data[key], }; \n    transformedComments.push(commentObj);\n  }\n  return transformedComments;\n}\n\n\n\n//you have to think that what actions we are going to do with the database , and  surprise, you know how much actions it came out , its just 5\n// 1. tofetch/get -  Single Quote (one ID),  All Comments(all IDs),  All Quotes(all IDs)\n// 2. toSend  -  Single Quote (one ID),  Single Comment(one ID)\n "],"names":["httpReducer","state","action","type","data","error","status","responseData","errorMessage","requestFunction","startWithPending","httpState","dispatch","useReducer","sendRequest","useCallback","async","requestData","message","props","className","classes","children","isEntering","setIsEntering","useState","authorInputRef","useRef","textInputRef","Fragment","when","location","onFocus","onSubmit","event","preventDefault","enteredAuthor","current","value","enteredText","isValidAuthor","test","isValidText","alert","onAddQuote","author","text","autoComplete","isLoading","LoadingSpinner","htmlFor","id","required","ref","rows","onClick","useHttp","addQuote","history","useHistory","useEffect","push","quoteData","FIREBASE_DOMAIN","getAllQuotes","response","fetch","json","ok","Error","transformedQuotes","key","quoteObj","getSingleQuote","quoteId","method","body","JSON","stringify","headers","addComment","commentData","commentId","name","getAllComments","transformedComments","commentObj"],"sourceRoot":""}