{"version":3,"sources":["hooks/use-http.js","lib/api.js","components/UI/Card.module.css","components/quotes/QuoteForm.module.css","components/UI/Card.js","components/quotes/QuoteForm.js","pages/NewQuote.js"],"names":["httpReducer","state","action","type","data","error","status","responseData","errorMessage","useHttp","requestFunction","startWithPending","useReducer","httpState","dispatch","sendRequest","useCallback","requestData","a","message","FIREBASE_DOMAIN","getAllQuotes","fetch","response","json","ok","Error","key","transformedQuotes","quoteObj","id","push","getSingleQuote","quoteId","loadedQuote","addQuote","quoteData","method","body","JSON","stringify","headers","addComment","commentData","commentId","name","getAllComments","transformedComments","commentObj","module","exports","Card","props","className","classes","card","children","QuoteForm","useState","isEntering","setIsEntering","authorInputRef","useRef","textInputRef","when","location","headingH2","onFocus","form","onSubmit","event","preventDefault","enteredAuthor","current","value","enteredText","trim","length","alert","onAddQuote","author","text","autoComplete","isLoading","loading","LoadingSpinner","control","htmlFor","ref","rows","actions","onClick","NewQuote","history","useHistory","useEffect"],"mappings":"uLAEMA,EAAa,SAACC,EAAOC,GACzB,MAAoB,SAAhBA,EAAOC,KAA2B,CAAGC,KAAM,KAAOC,MAAO,KAAOC,OAAQ,WACxD,YAAhBJ,EAAOC,KAA8B,CAAGC,KAAMF,EAAOK,aAAeF,MAAO,KAAOC,OAAQ,aAC1E,UAAhBJ,EAAOC,KAA2B,CAAEC,KAAM,KAAMC,MAAOH,EAAOM,aAAcF,OAAQ,aACjFL,GAsBMQ,IAnBC,SAACC,GAA6C,IAA5BC,EAA2B,wDAC3D,EAA8BC,qBAAYZ,EAAa,CAAEM,OAAQK,EAAmB,UAAY,KAAMP,KAAM,KAAMC,MAAO,OAAzH,mBAAOQ,EAAP,KAAkBC,EAAlB,KAEMC,EAAcC,sBAAW,uCAC7B,WAAgBC,GAAhB,eAAAC,EAAA,6DACEJ,EAAS,CAAEX,KAAM,SADnB,kBAI+BO,EAAgBO,GAJ/C,OAIUV,EAJV,OAKIO,EAAS,CAAEX,KAAM,UAAWI,iBALhC,gDAOIO,EAAS,CAAEX,KAAM,QAASK,aAAc,KAAMW,SAAW,0BAP7D,yDAD6B,sDAW7B,CAACT,IAEH,OAAO,aAAEK,eAAgBF,K,+OCzBrBO,EAAkB,yDAGjB,SAAeC,IAAtB,+B,4CAAO,oCAAAH,EAAA,sEACkBI,MAAM,GAAD,OAAIF,EAAJ,iBADvB,cACCG,EADD,gBAEcA,EAASC,OAFvB,UAECpB,EAFD,OAGAmB,EAASE,GAHT,sBAGoB,IAAIC,MAAMtB,EAAKe,SAAW,2BAH9C,OAML,IAAWQ,KADLC,EAAoB,GACRxB,EAAeyB,EAAT,aAAuBC,GAAIH,GAASvB,EAAKuB,IACjEC,EAAkBG,KAAKF,GAPlB,yBASCD,GATD,6C,sBAaA,SAAeI,EAAtB,kC,4CAAO,WAA8BC,GAA9B,mBAAAf,EAAA,sEACkBI,MAAM,GAAD,OAAIF,EAAJ,mBAA8Ba,EAA9B,UADvB,cACCV,EADD,gBAEcA,EAASC,OAFvB,UAECpB,EAFD,OAIAmB,EAASE,GAJT,sBAIqB,IAAIC,MAAMtB,EAAKe,SAAW,0BAJ/C,cAMCe,EAND,aAMiBJ,GAAIG,GAAY7B,GANjC,kBAOE8B,GAPF,6C,sBAUA,IAAMC,EAAQ,uCAAG,WAAMC,GAAN,iBAAAlB,EAAA,sEAECI,MAAM,GAAD,OAAIF,EAAJ,gBAAmC,CAAEiB,OAAQ,OAAQC,KAAMC,KAAKC,UAAUJ,GAAYK,QAAS,CAAE,eAAgB,sBAFvH,cAEhBlB,EAFgB,gBAGHA,EAASC,OAHN,UAGhBpB,EAHgB,OAKjBmB,EAASE,GALQ,sBAKG,IAAIC,MAAMtB,EAAKe,SAAW,2BAL7B,gCAMf,MANe,2CAAH,sDAUd,SAAeuB,EAAtB,kC,4CAAO,WAA0BzB,GAA1B,iBAAAC,EAAA,sEACkBI,MAAM,GAAD,OAAIF,EAAJ,qBAAiCH,EAAYgB,QAA7C,SAA6D,CAACI,OAAQ,OAAOC,KAAMC,KAAKC,UAAUvB,EAAY0B,aAAaF,QAAS,CAAC,eAAgB,sBAD5K,cACClB,EADD,gBAEcA,EAASC,OAFvB,UAECpB,EAFD,OAIAmB,EAASE,GAJT,sBAIqB,IAAIC,MAAMtB,EAAKe,SAAW,0BAJ/C,gCAKE,CAAEyB,UAAWxC,EAAKyC,OALpB,4C,sBAQA,IAAMC,EAAc,uCAAG,WAAMb,GAAN,uBAAAf,EAAA,sEAELI,MAAM,GAAD,OAAIF,EAAJ,qBAAgCa,EAAhC,UAFA,cAEtBV,EAFsB,gBAGTA,EAASC,OAHA,UAGtBpB,EAHsB,OAKvBmB,EAASE,GALc,sBAKF,IAAIC,MAAMtB,EAAKe,SAAW,2BALxB,OAQ5B,IAAWQ,KAFLoB,EAAsB,GAEV3C,EACV4C,EADgB,aACDlB,GAAIH,GAAQvB,EAAKuB,IACtCoB,EAAoBhB,KAAKiB,GAVC,yBAYrBD,GAZqB,4CAAH,uD,mBC3C3BE,EAAOC,QAAU,CAAC,KAAO,qB,mBCAzBD,EAAOC,QAAU,CAAC,UAAY,6BAA6B,KAAO,wBAAwB,QAAU,2BAA2B,QAAU,2BAA2B,QAAU,6B,yFCK/JC,EAJF,SAACC,GACZ,OAAO,qBAAKC,UAAWC,IAAQC,KAAxB,SAA+BH,EAAMI,Y,iDCsE/BC,EA/DG,SAACL,GACjB,MAAsCM,oBAAS,GAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KACMC,EAAiBC,mBACjBC,EAAeD,mBA+BrB,OACE,eAAC,WAAD,WACE,cAAC,IAAD,CAAQE,KAAOL,EAAYxC,QAAS,SAAC8C,GAAD,MAAY,oEAElD,oBAAIZ,UAAWC,IAAQY,UAAvB,uBACA,cAAC,EAAD,UACE,uBAAMC,QAZa,WACjBP,GAAc,IAWiBP,UAAWC,IAAQc,KAAMC,SAnC9D,SAA2BC,GACzBA,EAAMC,iBAEN,IAAMC,EAAgBX,EAAeY,QAAQC,MACvCC,EAAcZ,EAAaU,QAAQC,MAEP,IAA/BF,EAAcI,OAAOC,QAA6C,IAA9BF,EAAYC,OAAOC,QACxDC,MAAM,6CAIR1B,EAAM2B,WAAW,CAAEC,OAAQR,EAAeS,KAAMN,IAChDd,EAAeY,QAAQC,MAAQ,GAC/BX,EAAaU,QAAQC,MAAQ,GAE7BI,MAAM,oBAoBkFI,aAAa,MAAnG,UAEG9B,EAAM+B,WAAe,sBAAK9B,UAAWC,IAAQ8B,QAAxB,cAAkC,cAACC,EAAA,EAAD,IAAlC,OAEtB,sBAAKhC,UAAWC,IAAQgC,QAAxB,UACE,wBAAOC,QAAQ,SAAf,oBAA+B,cAAC,IAAD,IAA/B,OACA,uBAAOpF,KAAK,OAAO2B,GAAG,SAAS0D,IAAK3B,OAGtC,sBAAKR,UAAWC,IAAQgC,QAAxB,UACE,wBAAOC,QAAQ,OAAf,yBAAkC,cAAC,IAAD,IAAlC,OACA,0BAAUzD,GAAG,OAAO2D,KAAK,IAAID,IAAKzB,OAEpC,qBAAKV,UAAWC,IAAQoC,QAAxB,SACI,yBAAQC,QA7BU,WAC1B/B,GAAc,IA4BkCP,UAAU,MAAlD,uBAAkE,cAAC,IAAD,kB,gBClC/DuC,UAxBE,WACf,MAAgCnF,YAAQ0B,KAAhCpB,EAAR,EAAQA,YAAaT,EAArB,EAAqBA,OACfuF,EAAUC,cAEhBC,qBAAU,WACO,cAAXzF,GACFuF,EAAQ9D,KAAK,cAQjB,OACE,mCACE,cAAC,EAAD,CACEoD,UAAsB,cAAX7E,EACXyE,WARkB,SAAC3C,GACvBrB,EAAYqB","file":"static/js/8.762922f7.chunk.js","sourcesContent":["import { useReducer, useCallback } from 'react';\n\nconst httpReducer= (state, action)=>{\n  if (action.type === 'SEND') {  return {  data: null,  error: null,  status: 'pending',  };  }\n  if (action.type === 'SUCCESS') {  return {  data: action.responseData,  error: null,  status: 'completed',  };  }\n  if (action.type === 'ERROR') { return { data: null, error: action.errorMessage, status: 'completed', }; }\n  return state;\n}\n\nconst useHttp = (requestFunction, startWithPending = false)=>{\n  const [httpState, dispatch] = useReducer( httpReducer, { status: startWithPending ? 'pending' : null, data: null, error: null });\n\n  const sendRequest = useCallback(\n    async function (requestData) {\n      dispatch({ type: 'SEND' });\n\n      try {\n        const responseData = await requestFunction(requestData);\n        dispatch({ type: 'SUCCESS', responseData });\n      } catch (error) {\n        dispatch({ type: 'ERROR', errorMessage: error.message || 'Something went wrong!', });\n      }\n    },\n    [requestFunction]\n  );\n  return { sendRequest, ...httpState };\n}\n\nexport default useHttp;\n","const FIREBASE_DOMAIN = 'https://s22-auth-default-rtdb.firebaseio.com//quoteApp';\n\n// export const getAllQuotes = async()=> {\nexport async function getAllQuotes() {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`);\n  const data = await response.json();\n  if (!response.ok) {throw new Error(data.message || 'Could not fetch quotes.');}\n\n  const transformedQuotes = [];\n  for (const key in data) {  const quoteObj = {  id: key,  ...data[key],  };\n  transformedQuotes.push(quoteObj);\n  }\n return transformedQuotes;\n}\n\n// export const getSingleQuote = async(quoteId)=> {\nexport async function getSingleQuote(quoteId) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes/${quoteId}.json`);\n  const data = await response.json();\n\n  if (!response.ok) { throw new Error(data.message || 'Could not fetch quote.'); }\n\n  const loadedQuote = { id: quoteId, ...data, };\n  return loadedQuote;\n}\n\nexport const addQuote = async(quoteData) => {\n  // export async function addQuote(quoteData) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`, { method: 'POST', body: JSON.stringify(quoteData), headers: { 'Content-Type': 'application/json', }, });\n  const data = await response.json();\n\n  if (!response.ok) {throw new Error(data.message || 'Could not create quote.');}\n  return null;\n}\n\n// export const addComment = async(requestData)=> {\nexport async function addComment(requestData) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/comments/${ requestData.quoteId}.json`, {method: 'POST',body: JSON.stringify(requestData.commentData),headers: {'Content-Type': 'application/json',},});\n  const data = await response.json();\n\n  if (!response.ok) { throw new Error(data.message || 'Could not add comment.'); }\n  return { commentId: data.name };\n}\n\nexport const getAllComments = async(quoteId)=> {\n// export async function getAllComments(quoteId) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/comments/${quoteId}.json`);\n  const data = await response.json();\n\n  if (!response.ok) { throw new Error(data.message || 'Could not get comments.'); }\n  const transformedComments = [];\n\n  for (const key in data) {\n    const commentObj = { id: key, ...data[key], }; \n    transformedComments.push(commentObj);\n  }\n  return transformedComments;\n}\n\n\n\n//you have to think that what actions we are going to do with the database , and  surprise, you know how much actions it came out , its just 5\n// 1. tofetch/get -  Single Quote (one ID),  All Comments(all IDs),  All Quotes(all IDs)\n// 2. toSend  -  Single Quote (one ID),  Single Comment(one ID)\n ","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__1pq6p\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"headingH2\":\"QuoteForm_headingH2__1HmbP\",\"form\":\"QuoteForm_form__1Pa3Q\",\"loading\":\"QuoteForm_loading__2KV52\",\"control\":\"QuoteForm_control__2J66H\",\"actions\":\"QuoteForm_actions__mSmPJ\"};","import classes from './Card.module.css';\n\nconst Card = (props) => {\n  return <div className={classes.card}>{props.children}</div>;\n};\n\nexport default Card;\n","import { useRef , useState , Fragment} from 'react';\nimport { Prompt } from 'react-router-dom';\n\nimport Card from '../UI/Card';\nimport LoadingSpinner from '../UI/LoadingSpinner';\nimport classes from './QuoteForm.module.css';\nimport { HiPencilAlt } from \"react-icons/hi\";\nimport { FaUserEdit } from \"react-icons/fa\"\nimport { BsTextParagraph } from \"react-icons/bs\"\n\nconst QuoteForm = (props) => {\n  const [isEntering , setIsEntering ] = useState(false)\n  const authorInputRef = useRef();\n  const textInputRef = useRef();\n\n  function submitFormHandler(event) {\n    event.preventDefault();\n\n    const enteredAuthor = authorInputRef.current.value;\n    const enteredText = textInputRef.current.value;\n\n    if(enteredAuthor.trim().length ===0 || enteredText.trim().length === 0){\n      alert(\"Please enter an author and your thoughts!\");\n    }\n    // optional: Could validate here\n\n    props.onAddQuote({ author: enteredAuthor, text: enteredText });\n    authorInputRef.current.value = \"\";\n    textInputRef.current.value = \"\";\n\n    alert(\"Astra submitted\");\n    \n\n  }\n\n  const finishEnteringHandler=()=>{\n    setIsEntering(false)\n  }\n  const formFocusHandler=()=>{\n        setIsEntering(true)\n  }\n  \n\n\n  return (\n    <Fragment>\n      <Prompt when ={isEntering} message={(location)=>'Are you sured you want to leave? All entered data will be lost'}/>\n\n    <h2 className={classes.headingH2}>New Quote</h2>\n    <Card>\n      <form onFocus={formFocusHandler} className={classes.form} onSubmit={submitFormHandler}autoComplete='off'>\n        \n        {props.isLoading && ( <div className={classes.loading}> <LoadingSpinner /> </div> )}\n\n        <div className={classes.control}>\n          <label htmlFor='author'>Author <FaUserEdit /> </label>\n          <input type='text' id='author' ref={authorInputRef} />\n        </div>\n        \n        <div className={classes.control}>\n          <label htmlFor='text'>Astra/Quote <BsTextParagraph/> </label>\n          <textarea id='text' rows='5' ref={textInputRef}></textarea>\n        </div>\n        <div className={classes.actions}>\n            <button onClick={finishEnteringHandler} className='btn'>Add Quote <HiPencilAlt/> \n               </button>\n          </div>\n      </form>\n    </Card>\n        </Fragment>\n  );\n};\n\nexport default QuoteForm;\n","import { useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport QuoteForm from \"../components/quotes/QuoteForm\";\r\nimport useHttp from \"../hooks/use-http\";\r\nimport { addQuote } from \"../lib/api\";\r\n\r\nconst NewQuote = () => {\r\n  const { sendRequest, status } = useHttp(addQuote);\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    if (status === \"completed\") {\r\n      history.push(\"/quotes\");\r\n    }\r\n  });\r\n\r\n  const addQuoteHandler = (quoteData) => {\r\n    sendRequest(quoteData);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <QuoteForm\r\n        isLoading={status === \"completed\"}\r\n        onAddQuote={addQuoteHandler}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default NewQuote;\r\n"],"sourceRoot":""}